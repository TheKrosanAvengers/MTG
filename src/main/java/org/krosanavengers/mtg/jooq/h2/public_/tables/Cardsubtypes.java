/*
 * This file is generated by jOOQ.
 */
package org.krosanavengers.mtg.jooq.h2.public_.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.krosanavengers.mtg.jooq.h2.public_.Indexes;
import org.krosanavengers.mtg.jooq.h2.public_.Keys;
import org.krosanavengers.mtg.jooq.h2.public_.Public;
import org.krosanavengers.mtg.jooq.h2.public_.tables.records.CardsubtypesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cardsubtypes extends TableImpl<CardsubtypesRecord> {

    private static final long serialVersionUID = 2053957368;

    /**
     * The reference instance of <code>PUBLIC.CARDSUBTYPES</code>
     */
    public static final Cardsubtypes CARDSUBTYPES = new Cardsubtypes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CardsubtypesRecord> getRecordType() {
        return CardsubtypesRecord.class;
    }

    /**
     * The column <code>PUBLIC.CARDSUBTYPES.ID</code>.
     */
    public final TableField<CardsubtypesRecord, Long> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.CARDSUBTYPES.SUBTYPE</code>.
     */
    public final TableField<CardsubtypesRecord, Long> SUBTYPE = createField(DSL.name("SUBTYPE"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>PUBLIC.CARDSUBTYPES.CARD</code>.
     */
    public final TableField<CardsubtypesRecord, Long> CARD = createField(DSL.name("CARD"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>PUBLIC.CARDSUBTYPES</code> table reference
     */
    public Cardsubtypes() {
        this(DSL.name("CARDSUBTYPES"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.CARDSUBTYPES</code> table reference
     */
    public Cardsubtypes(String alias) {
        this(DSL.name(alias), CARDSUBTYPES);
    }

    /**
     * Create an aliased <code>PUBLIC.CARDSUBTYPES</code> table reference
     */
    public Cardsubtypes(Name alias) {
        this(alias, CARDSUBTYPES);
    }

    private Cardsubtypes(Name alias, Table<CardsubtypesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Cardsubtypes(Name alias, Table<CardsubtypesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Cardsubtypes(Table<O> child, ForeignKey<O, CardsubtypesRecord> key) {
        super(child, key, CARDSUBTYPES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONSTRAINT_INDEX_2, Indexes.CONSTRAINT_INDEX_27, Indexes.PRIMARY_KEY_2);
    }

    @Override
    public Identity<CardsubtypesRecord, Long> getIdentity() {
        return Keys.IDENTITY_CARDSUBTYPES;
    }

    @Override
    public UniqueKey<CardsubtypesRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_2;
    }

    @Override
    public List<UniqueKey<CardsubtypesRecord>> getKeys() {
        return Arrays.<UniqueKey<CardsubtypesRecord>>asList(Keys.CONSTRAINT_2);
    }

    @Override
    public List<ForeignKey<CardsubtypesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CardsubtypesRecord, ?>>asList(Keys.CONSTRAINT_27, Keys.CONSTRAINT_271);
    }

    public Subtypes subtypes() {
        return new Subtypes(this, Keys.CONSTRAINT_27);
    }

    public Cards cards() {
        return new Cards(this, Keys.CONSTRAINT_271);
    }

    @Override
    public Cardsubtypes as(String alias) {
        return new Cardsubtypes(DSL.name(alias), this);
    }

    @Override
    public Cardsubtypes as(Name alias) {
        return new Cardsubtypes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cardsubtypes rename(String name) {
        return new Cardsubtypes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cardsubtypes rename(Name name) {
        return new Cardsubtypes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
