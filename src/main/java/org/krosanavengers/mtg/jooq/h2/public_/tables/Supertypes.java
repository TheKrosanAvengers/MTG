/*
 * This file is generated by jOOQ.
 */
package org.krosanavengers.mtg.jooq.h2.public_.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.krosanavengers.mtg.jooq.h2.public_.Indexes;
import org.krosanavengers.mtg.jooq.h2.public_.Keys;
import org.krosanavengers.mtg.jooq.h2.public_.Public;
import org.krosanavengers.mtg.jooq.h2.public_.tables.records.SupertypesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Supertypes extends TableImpl<SupertypesRecord> {

    private static final long serialVersionUID = 671365020;

    /**
     * The reference instance of <code>PUBLIC.SUPERTYPES</code>
     */
    public static final Supertypes SUPERTYPES = new Supertypes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SupertypesRecord> getRecordType() {
        return SupertypesRecord.class;
    }

    /**
     * The column <code>PUBLIC.SUPERTYPES.ID</code>.
     */
    public final TableField<SupertypesRecord, Long> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.SUPERTYPES.NAME</code>.
     */
    public final TableField<SupertypesRecord, String> NAME = createField(DSL.name("NAME"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * Create a <code>PUBLIC.SUPERTYPES</code> table reference
     */
    public Supertypes() {
        this(DSL.name("SUPERTYPES"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.SUPERTYPES</code> table reference
     */
    public Supertypes(String alias) {
        this(DSL.name(alias), SUPERTYPES);
    }

    /**
     * Create an aliased <code>PUBLIC.SUPERTYPES</code> table reference
     */
    public Supertypes(Name alias) {
        this(alias, SUPERTYPES);
    }

    private Supertypes(Name alias, Table<SupertypesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Supertypes(Name alias, Table<SupertypesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Supertypes(Table<O> child, ForeignKey<O, SupertypesRecord> key) {
        super(child, key, SUPERTYPES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONSTRAINT_INDEX_B, Indexes.PRIMARY_KEY_B);
    }

    @Override
    public Identity<SupertypesRecord, Long> getIdentity() {
        return Keys.IDENTITY_SUPERTYPES;
    }

    @Override
    public UniqueKey<SupertypesRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_B;
    }

    @Override
    public List<UniqueKey<SupertypesRecord>> getKeys() {
        return Arrays.<UniqueKey<SupertypesRecord>>asList(Keys.CONSTRAINT_B, Keys.CONSTRAINT_B7);
    }

    @Override
    public Supertypes as(String alias) {
        return new Supertypes(DSL.name(alias), this);
    }

    @Override
    public Supertypes as(Name alias) {
        return new Supertypes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Supertypes rename(String name) {
        return new Supertypes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Supertypes rename(Name name) {
        return new Supertypes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
