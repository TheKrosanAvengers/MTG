/*
 * This file is generated by jOOQ.
 */
package org.krosanavengers.mtg.jooq.mtgjson.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.krosanavengers.mtg.jooq.mtgjson.DefaultSchema;
import org.krosanavengers.mtg.jooq.mtgjson.Keys;
import org.krosanavengers.mtg.jooq.mtgjson.tables.records.RulingsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rulings extends TableImpl<RulingsRecord> {

    private static final long serialVersionUID = 1083383;

    /**
     * The reference instance of <code>rulings</code>
     */
    public static final Rulings RULINGS = new Rulings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RulingsRecord> getRecordType() {
        return RulingsRecord.class;
    }

    /**
     * The column <code>rulings.id</code>.
     */
    public final TableField<RulingsRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>rulings.date</code>.
     */
    public final TableField<RulingsRecord, String> DATE = createField(DSL.name("date"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>rulings.text</code>.
     */
    public final TableField<RulingsRecord, String> TEXT = createField(DSL.name("text"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>rulings.uuid</code>.
     */
    public final TableField<RulingsRecord, String> UUID = createField(DSL.name("uuid"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>rulings</code> table reference
     */
    public Rulings() {
        this(DSL.name("rulings"), null);
    }

    /**
     * Create an aliased <code>rulings</code> table reference
     */
    public Rulings(String alias) {
        this(DSL.name(alias), RULINGS);
    }

    /**
     * Create an aliased <code>rulings</code> table reference
     */
    public Rulings(Name alias) {
        this(alias, RULINGS);
    }

    private Rulings(Name alias, Table<RulingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Rulings(Name alias, Table<RulingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Rulings(Table<O> child, ForeignKey<O, RulingsRecord> key) {
        super(child, key, RULINGS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<RulingsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_RULINGS;
    }

    @Override
    public UniqueKey<RulingsRecord> getPrimaryKey() {
        return Keys.PK_RULINGS;
    }

    @Override
    public List<UniqueKey<RulingsRecord>> getKeys() {
        return Arrays.<UniqueKey<RulingsRecord>>asList(Keys.PK_RULINGS);
    }

    @Override
    public List<ForeignKey<RulingsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RulingsRecord, ?>>asList(Keys.FK_RULINGS_CARDS_1);
    }

    public Cards cards() {
        return new Cards(this, Keys.FK_RULINGS_CARDS_1);
    }

    @Override
    public Rulings as(String alias) {
        return new Rulings(DSL.name(alias), this);
    }

    @Override
    public Rulings as(Name alias) {
        return new Rulings(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rulings rename(String name) {
        return new Rulings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rulings rename(Name name) {
        return new Rulings(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
