/*
 * This file is generated by jOOQ.
 */
package org.krosanavengers.mtg.jooq.mtgjson.tables.daos;


import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.krosanavengers.mtg.jooq.mtgjson.tables.Tokens;
import org.krosanavengers.mtg.jooq.mtgjson.tables.records.TokensRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TokensDao extends DAOImpl<TokensRecord, org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens, Integer> {

    /**
     * Create a new TokensDao without any configuration
     */
    public TokensDao() {
        super(Tokens.TOKENS, org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens.class);
    }

    /**
     * Create a new TokensDao with an attached configuration
     */
    public TokensDao(Configuration configuration) {
        super(Tokens.TOKENS, org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens.class, configuration);
    }

    @Override
    public Integer getId(org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Tokens.TOKENS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchById(Integer... values) {
        return fetch(Tokens.TOKENS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens fetchOneById(Integer value) {
        return fetchOne(Tokens.TOKENS.ID, value);
    }

    /**
     * Fetch records that have <code>artist BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchRangeOfArtist(String lowerInclusive, String upperInclusive) {
        return fetchRange(Tokens.TOKENS.ARTIST, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>artist IN (values)</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchByArtist(String... values) {
        return fetch(Tokens.TOKENS.ARTIST, values);
    }

    /**
     * Fetch records that have <code>borderColor BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchRangeOfBordercolor(String lowerInclusive, String upperInclusive) {
        return fetchRange(Tokens.TOKENS.BORDERCOLOR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>borderColor IN (values)</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchByBordercolor(String... values) {
        return fetch(Tokens.TOKENS.BORDERCOLOR, values);
    }

    /**
     * Fetch records that have <code>colorIdentity BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchRangeOfColoridentity(String lowerInclusive, String upperInclusive) {
        return fetchRange(Tokens.TOKENS.COLORIDENTITY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>colorIdentity IN (values)</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchByColoridentity(String... values) {
        return fetch(Tokens.TOKENS.COLORIDENTITY, values);
    }

    /**
     * Fetch records that have <code>colorIndicator BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchRangeOfColorindicator(String lowerInclusive, String upperInclusive) {
        return fetchRange(Tokens.TOKENS.COLORINDICATOR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>colorIndicator IN (values)</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchByColorindicator(String... values) {
        return fetch(Tokens.TOKENS.COLORINDICATOR, values);
    }

    /**
     * Fetch records that have <code>colors BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchRangeOfColors(String lowerInclusive, String upperInclusive) {
        return fetchRange(Tokens.TOKENS.COLORS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>colors IN (values)</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchByColors(String... values) {
        return fetch(Tokens.TOKENS.COLORS, values);
    }

    /**
     * Fetch records that have <code>duelDeck BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchRangeOfDueldeck(String lowerInclusive, String upperInclusive) {
        return fetchRange(Tokens.TOKENS.DUELDECK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>duelDeck IN (values)</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchByDueldeck(String... values) {
        return fetch(Tokens.TOKENS.DUELDECK, values);
    }

    /**
     * Fetch records that have <code>isOnlineOnly BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchRangeOfIsonlineonly(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Tokens.TOKENS.ISONLINEONLY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>isOnlineOnly IN (values)</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchByIsonlineonly(Integer... values) {
        return fetch(Tokens.TOKENS.ISONLINEONLY, values);
    }

    /**
     * Fetch records that have <code>layout BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchRangeOfLayout(String lowerInclusive, String upperInclusive) {
        return fetchRange(Tokens.TOKENS.LAYOUT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>layout IN (values)</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchByLayout(String... values) {
        return fetch(Tokens.TOKENS.LAYOUT, values);
    }

    /**
     * Fetch records that have <code>loyalty BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchRangeOfLoyalty(String lowerInclusive, String upperInclusive) {
        return fetchRange(Tokens.TOKENS.LOYALTY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>loyalty IN (values)</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchByLoyalty(String... values) {
        return fetch(Tokens.TOKENS.LOYALTY, values);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Tokens.TOKENS.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchByName(String... values) {
        return fetch(Tokens.TOKENS.NAME, values);
    }

    /**
     * Fetch records that have <code>names BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchRangeOfNames(String lowerInclusive, String upperInclusive) {
        return fetchRange(Tokens.TOKENS.NAMES, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>names IN (values)</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchByNames(String... values) {
        return fetch(Tokens.TOKENS.NAMES, values);
    }

    /**
     * Fetch records that have <code>number BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchRangeOfNumber(String lowerInclusive, String upperInclusive) {
        return fetchRange(Tokens.TOKENS.NUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>number IN (values)</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchByNumber(String... values) {
        return fetch(Tokens.TOKENS.NUMBER, values);
    }

    /**
     * Fetch records that have <code>power BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchRangeOfPower(String lowerInclusive, String upperInclusive) {
        return fetchRange(Tokens.TOKENS.POWER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>power IN (values)</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchByPower(String... values) {
        return fetch(Tokens.TOKENS.POWER, values);
    }

    /**
     * Fetch records that have <code>reverseRelated BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchRangeOfReverserelated(String lowerInclusive, String upperInclusive) {
        return fetchRange(Tokens.TOKENS.REVERSERELATED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>reverseRelated IN (values)</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchByReverserelated(String... values) {
        return fetch(Tokens.TOKENS.REVERSERELATED, values);
    }

    /**
     * Fetch records that have <code>scryfallId BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchRangeOfScryfallid(String lowerInclusive, String upperInclusive) {
        return fetchRange(Tokens.TOKENS.SCRYFALLID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>scryfallId IN (values)</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchByScryfallid(String... values) {
        return fetch(Tokens.TOKENS.SCRYFALLID, values);
    }

    /**
     * Fetch records that have <code>scryfallIllustrationId BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchRangeOfScryfallillustrationid(String lowerInclusive, String upperInclusive) {
        return fetchRange(Tokens.TOKENS.SCRYFALLILLUSTRATIONID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>scryfallIllustrationId IN (values)</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchByScryfallillustrationid(String... values) {
        return fetch(Tokens.TOKENS.SCRYFALLILLUSTRATIONID, values);
    }

    /**
     * Fetch records that have <code>scryfallOracleId BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchRangeOfScryfalloracleid(String lowerInclusive, String upperInclusive) {
        return fetchRange(Tokens.TOKENS.SCRYFALLORACLEID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>scryfallOracleId IN (values)</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchByScryfalloracleid(String... values) {
        return fetch(Tokens.TOKENS.SCRYFALLORACLEID, values);
    }

    /**
     * Fetch records that have <code>setCode BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchRangeOfSetcode(String lowerInclusive, String upperInclusive) {
        return fetchRange(Tokens.TOKENS.SETCODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>setCode IN (values)</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchBySetcode(String... values) {
        return fetch(Tokens.TOKENS.SETCODE, values);
    }

    /**
     * Fetch records that have <code>side BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchRangeOfSide(String lowerInclusive, String upperInclusive) {
        return fetchRange(Tokens.TOKENS.SIDE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>side IN (values)</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchBySide(String... values) {
        return fetch(Tokens.TOKENS.SIDE, values);
    }

    /**
     * Fetch records that have <code>subtypes BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchRangeOfSubtypes(String lowerInclusive, String upperInclusive) {
        return fetchRange(Tokens.TOKENS.SUBTYPES, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>subtypes IN (values)</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchBySubtypes(String... values) {
        return fetch(Tokens.TOKENS.SUBTYPES, values);
    }

    /**
     * Fetch records that have <code>supertypes BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchRangeOfSupertypes(String lowerInclusive, String upperInclusive) {
        return fetchRange(Tokens.TOKENS.SUPERTYPES, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>supertypes IN (values)</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchBySupertypes(String... values) {
        return fetch(Tokens.TOKENS.SUPERTYPES, values);
    }

    /**
     * Fetch records that have <code>text BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchRangeOfText(String lowerInclusive, String upperInclusive) {
        return fetchRange(Tokens.TOKENS.TEXT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>text IN (values)</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchByText(String... values) {
        return fetch(Tokens.TOKENS.TEXT, values);
    }

    /**
     * Fetch records that have <code>toughness BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchRangeOfToughness(String lowerInclusive, String upperInclusive) {
        return fetchRange(Tokens.TOKENS.TOUGHNESS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>toughness IN (values)</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchByToughness(String... values) {
        return fetch(Tokens.TOKENS.TOUGHNESS, values);
    }

    /**
     * Fetch records that have <code>type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchRangeOfType(String lowerInclusive, String upperInclusive) {
        return fetchRange(Tokens.TOKENS.TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchByType(String... values) {
        return fetch(Tokens.TOKENS.TYPE, values);
    }

    /**
     * Fetch records that have <code>types BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchRangeOfTypes(String lowerInclusive, String upperInclusive) {
        return fetchRange(Tokens.TOKENS.TYPES, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>types IN (values)</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchByTypes(String... values) {
        return fetch(Tokens.TOKENS.TYPES, values);
    }

    /**
     * Fetch records that have <code>uuid BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchRangeOfUuid(String lowerInclusive, String upperInclusive) {
        return fetchRange(Tokens.TOKENS.UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>uuid IN (values)</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchByUuid(String... values) {
        return fetch(Tokens.TOKENS.UUID, values);
    }

    /**
     * Fetch records that have <code>watermark BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchRangeOfWatermark(String lowerInclusive, String upperInclusive) {
        return fetchRange(Tokens.TOKENS.WATERMARK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>watermark IN (values)</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.Tokens> fetchByWatermark(String... values) {
        return fetch(Tokens.TOKENS.WATERMARK, values);
    }
}
