/*
 * This file is generated by jOOQ.
 */
package org.krosanavengers.mtg.jooq.mtgjson.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.krosanavengers.mtg.jooq.mtgjson.DefaultSchema;
import org.krosanavengers.mtg.jooq.mtgjson.Keys;
import org.krosanavengers.mtg.jooq.mtgjson.tables.records.TokensRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tokens extends TableImpl<TokensRecord> {

    private static final long serialVersionUID = -1222969663;

    /**
     * The reference instance of <code>tokens</code>
     */
    public static final Tokens TOKENS = new Tokens();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TokensRecord> getRecordType() {
        return TokensRecord.class;
    }

    /**
     * The column <code>tokens.id</code>.
     */
    public final TableField<TokensRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>tokens.artist</code>.
     */
    public final TableField<TokensRecord, String> ARTIST = createField(DSL.name("artist"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>tokens.borderColor</code>.
     */
    public final TableField<TokensRecord, String> BORDERCOLOR = createField(DSL.name("borderColor"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>tokens.colorIdentity</code>.
     */
    public final TableField<TokensRecord, String> COLORIDENTITY = createField(DSL.name("colorIdentity"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>tokens.colorIndicator</code>.
     */
    public final TableField<TokensRecord, String> COLORINDICATOR = createField(DSL.name("colorIndicator"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>tokens.colors</code>.
     */
    public final TableField<TokensRecord, String> COLORS = createField(DSL.name("colors"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>tokens.duelDeck</code>.
     */
    public final TableField<TokensRecord, String> DUELDECK = createField(DSL.name("duelDeck"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>tokens.isOnlineOnly</code>.
     */
    public final TableField<TokensRecord, Integer> ISONLINEONLY = createField(DSL.name("isOnlineOnly"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>tokens.layout</code>.
     */
    public final TableField<TokensRecord, String> LAYOUT = createField(DSL.name("layout"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>tokens.loyalty</code>.
     */
    public final TableField<TokensRecord, String> LOYALTY = createField(DSL.name("loyalty"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>tokens.name</code>.
     */
    public final TableField<TokensRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>tokens.names</code>.
     */
    public final TableField<TokensRecord, String> NAMES = createField(DSL.name("names"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>tokens.number</code>.
     */
    public final TableField<TokensRecord, String> NUMBER = createField(DSL.name("number"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>tokens.power</code>.
     */
    public final TableField<TokensRecord, String> POWER = createField(DSL.name("power"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>tokens.reverseRelated</code>.
     */
    public final TableField<TokensRecord, String> REVERSERELATED = createField(DSL.name("reverseRelated"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>tokens.scryfallId</code>.
     */
    public final TableField<TokensRecord, String> SCRYFALLID = createField(DSL.name("scryfallId"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>tokens.scryfallIllustrationId</code>.
     */
    public final TableField<TokensRecord, String> SCRYFALLILLUSTRATIONID = createField(DSL.name("scryfallIllustrationId"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>tokens.scryfallOracleId</code>.
     */
    public final TableField<TokensRecord, String> SCRYFALLORACLEID = createField(DSL.name("scryfallOracleId"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>tokens.setCode</code>.
     */
    public final TableField<TokensRecord, String> SETCODE = createField(DSL.name("setCode"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>tokens.side</code>.
     */
    public final TableField<TokensRecord, String> SIDE = createField(DSL.name("side"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>tokens.subtypes</code>.
     */
    public final TableField<TokensRecord, String> SUBTYPES = createField(DSL.name("subtypes"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>tokens.supertypes</code>.
     */
    public final TableField<TokensRecord, String> SUPERTYPES = createField(DSL.name("supertypes"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>tokens.text</code>.
     */
    public final TableField<TokensRecord, String> TEXT = createField(DSL.name("text"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>tokens.toughness</code>.
     */
    public final TableField<TokensRecord, String> TOUGHNESS = createField(DSL.name("toughness"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>tokens.type</code>.
     */
    public final TableField<TokensRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>tokens.types</code>.
     */
    public final TableField<TokensRecord, String> TYPES = createField(DSL.name("types"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>tokens.uuid</code>.
     */
    public final TableField<TokensRecord, String> UUID = createField(DSL.name("uuid"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>tokens.watermark</code>.
     */
    public final TableField<TokensRecord, String> WATERMARK = createField(DSL.name("watermark"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>tokens</code> table reference
     */
    public Tokens() {
        this(DSL.name("tokens"), null);
    }

    /**
     * Create an aliased <code>tokens</code> table reference
     */
    public Tokens(String alias) {
        this(DSL.name(alias), TOKENS);
    }

    /**
     * Create an aliased <code>tokens</code> table reference
     */
    public Tokens(Name alias) {
        this(alias, TOKENS);
    }

    private Tokens(Name alias, Table<TokensRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tokens(Name alias, Table<TokensRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Tokens(Table<O> child, ForeignKey<O, TokensRecord> key) {
        super(child, key, TOKENS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<TokensRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TOKENS;
    }

    @Override
    public UniqueKey<TokensRecord> getPrimaryKey() {
        return Keys.PK_TOKENS;
    }

    @Override
    public List<UniqueKey<TokensRecord>> getKeys() {
        return Arrays.<UniqueKey<TokensRecord>>asList(Keys.PK_TOKENS);
    }

    @Override
    public List<ForeignKey<TokensRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TokensRecord, ?>>asList(Keys.FK_TOKENS_SETS_1);
    }

    public Sets sets() {
        return new Sets(this, Keys.FK_TOKENS_SETS_1);
    }

    @Override
    public Tokens as(String alias) {
        return new Tokens(DSL.name(alias), this);
    }

    @Override
    public Tokens as(Name alias) {
        return new Tokens(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tokens rename(String name) {
        return new Tokens(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tokens rename(Name name) {
        return new Tokens(name, null);
    }
}
