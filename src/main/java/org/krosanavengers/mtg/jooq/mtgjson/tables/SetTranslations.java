/*
 * This file is generated by jOOQ.
 */
package org.krosanavengers.mtg.jooq.mtgjson.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.krosanavengers.mtg.jooq.mtgjson.DefaultSchema;
import org.krosanavengers.mtg.jooq.mtgjson.Keys;
import org.krosanavengers.mtg.jooq.mtgjson.tables.records.SetTranslationsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SetTranslations extends TableImpl<SetTranslationsRecord> {

    private static final long serialVersionUID = -1397673195;

    /**
     * The reference instance of <code>set_translations</code>
     */
    public static final SetTranslations SET_TRANSLATIONS = new SetTranslations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SetTranslationsRecord> getRecordType() {
        return SetTranslationsRecord.class;
    }

    /**
     * The column <code>set_translations.id</code>.
     */
    public final TableField<SetTranslationsRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>set_translations.language</code>.
     */
    public final TableField<SetTranslationsRecord, String> LANGUAGE = createField(DSL.name("language"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>set_translations.setCode</code>.
     */
    public final TableField<SetTranslationsRecord, String> SETCODE = createField(DSL.name("setCode"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>set_translations.translation</code>.
     */
    public final TableField<SetTranslationsRecord, String> TRANSLATION = createField(DSL.name("translation"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>set_translations</code> table reference
     */
    public SetTranslations() {
        this(DSL.name("set_translations"), null);
    }

    /**
     * Create an aliased <code>set_translations</code> table reference
     */
    public SetTranslations(String alias) {
        this(DSL.name(alias), SET_TRANSLATIONS);
    }

    /**
     * Create an aliased <code>set_translations</code> table reference
     */
    public SetTranslations(Name alias) {
        this(alias, SET_TRANSLATIONS);
    }

    private SetTranslations(Name alias, Table<SetTranslationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private SetTranslations(Name alias, Table<SetTranslationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> SetTranslations(Table<O> child, ForeignKey<O, SetTranslationsRecord> key) {
        super(child, key, SET_TRANSLATIONS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<SetTranslationsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SET_TRANSLATIONS;
    }

    @Override
    public UniqueKey<SetTranslationsRecord> getPrimaryKey() {
        return Keys.PK_SET_TRANSLATIONS;
    }

    @Override
    public List<UniqueKey<SetTranslationsRecord>> getKeys() {
        return Arrays.<UniqueKey<SetTranslationsRecord>>asList(Keys.PK_SET_TRANSLATIONS);
    }

    @Override
    public List<ForeignKey<SetTranslationsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SetTranslationsRecord, ?>>asList(Keys.FK_SET_TRANSLATIONS_SETS_1);
    }

    public Sets sets() {
        return new Sets(this, Keys.FK_SET_TRANSLATIONS_SETS_1);
    }

    @Override
    public SetTranslations as(String alias) {
        return new SetTranslations(DSL.name(alias), this);
    }

    @Override
    public SetTranslations as(Name alias) {
        return new SetTranslations(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SetTranslations rename(String name) {
        return new SetTranslations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SetTranslations rename(Name name) {
        return new SetTranslations(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
