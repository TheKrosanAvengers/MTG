/*
 * This file is generated by jOOQ.
 */
package org.krosanavengers.mtg.jooq.mtgjson.tables.daos;


import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.krosanavengers.mtg.jooq.mtgjson.tables.ForeignData;
import org.krosanavengers.mtg.jooq.mtgjson.tables.records.ForeignDataRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ForeignDataDao extends DAOImpl<ForeignDataRecord, org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.ForeignData, Integer> {

    /**
     * Create a new ForeignDataDao without any configuration
     */
    public ForeignDataDao() {
        super(ForeignData.FOREIGN_DATA, org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.ForeignData.class);
    }

    /**
     * Create a new ForeignDataDao with an attached configuration
     */
    public ForeignDataDao(Configuration configuration) {
        super(ForeignData.FOREIGN_DATA, org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.ForeignData.class, configuration);
    }

    @Override
    public Integer getId(org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.ForeignData object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.ForeignData> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(ForeignData.FOREIGN_DATA.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.ForeignData> fetchById(Integer... values) {
        return fetch(ForeignData.FOREIGN_DATA.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.ForeignData fetchOneById(Integer value) {
        return fetchOne(ForeignData.FOREIGN_DATA.ID, value);
    }

    /**
     * Fetch records that have <code>flavorText BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.ForeignData> fetchRangeOfFlavortext(String lowerInclusive, String upperInclusive) {
        return fetchRange(ForeignData.FOREIGN_DATA.FLAVORTEXT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>flavorText IN (values)</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.ForeignData> fetchByFlavortext(String... values) {
        return fetch(ForeignData.FOREIGN_DATA.FLAVORTEXT, values);
    }

    /**
     * Fetch records that have <code>language BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.ForeignData> fetchRangeOfLanguage(String lowerInclusive, String upperInclusive) {
        return fetchRange(ForeignData.FOREIGN_DATA.LANGUAGE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>language IN (values)</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.ForeignData> fetchByLanguage(String... values) {
        return fetch(ForeignData.FOREIGN_DATA.LANGUAGE, values);
    }

    /**
     * Fetch records that have <code>multiverseId BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.ForeignData> fetchRangeOfMultiverseid(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(ForeignData.FOREIGN_DATA.MULTIVERSEID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>multiverseId IN (values)</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.ForeignData> fetchByMultiverseid(Integer... values) {
        return fetch(ForeignData.FOREIGN_DATA.MULTIVERSEID, values);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.ForeignData> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(ForeignData.FOREIGN_DATA.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.ForeignData> fetchByName(String... values) {
        return fetch(ForeignData.FOREIGN_DATA.NAME, values);
    }

    /**
     * Fetch records that have <code>text BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.ForeignData> fetchRangeOfText(String lowerInclusive, String upperInclusive) {
        return fetchRange(ForeignData.FOREIGN_DATA.TEXT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>text IN (values)</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.ForeignData> fetchByText(String... values) {
        return fetch(ForeignData.FOREIGN_DATA.TEXT, values);
    }

    /**
     * Fetch records that have <code>type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.ForeignData> fetchRangeOfType(String lowerInclusive, String upperInclusive) {
        return fetchRange(ForeignData.FOREIGN_DATA.TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.ForeignData> fetchByType(String... values) {
        return fetch(ForeignData.FOREIGN_DATA.TYPE, values);
    }

    /**
     * Fetch records that have <code>uuid BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.ForeignData> fetchRangeOfUuid(String lowerInclusive, String upperInclusive) {
        return fetchRange(ForeignData.FOREIGN_DATA.UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>uuid IN (values)</code>
     */
    public List<org.krosanavengers.mtg.jooq.mtgjson.tables.pojos.ForeignData> fetchByUuid(String... values) {
        return fetch(ForeignData.FOREIGN_DATA.UUID, values);
    }
}
