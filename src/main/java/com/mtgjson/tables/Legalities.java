/*
 * This file is generated by jOOQ.
 */
package com.mtgjson.tables;


import com.mtgjson.DefaultSchema;
import com.mtgjson.Keys;
import com.mtgjson.tables.records.LegalitiesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Legalities extends TableImpl<LegalitiesRecord> {

    private static final long serialVersionUID = 1505973595;

    /**
     * The reference instance of <code>legalities</code>
     */
    public static final Legalities LEGALITIES = new Legalities();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LegalitiesRecord> getRecordType() {
        return LegalitiesRecord.class;
    }

    /**
     * The column <code>legalities.id</code>.
     */
    public final TableField<LegalitiesRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>legalities.format</code>.
     */
    public final TableField<LegalitiesRecord, String> FORMAT = createField(DSL.name("format"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>legalities.status</code>.
     */
    public final TableField<LegalitiesRecord, String> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>legalities.uuid</code>.
     */
    public final TableField<LegalitiesRecord, String> UUID = createField(DSL.name("uuid"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>legalities</code> table reference
     */
    public Legalities() {
        this(DSL.name("legalities"), null);
    }

    /**
     * Create an aliased <code>legalities</code> table reference
     */
    public Legalities(String alias) {
        this(DSL.name(alias), LEGALITIES);
    }

    /**
     * Create an aliased <code>legalities</code> table reference
     */
    public Legalities(Name alias) {
        this(alias, LEGALITIES);
    }

    private Legalities(Name alias, Table<LegalitiesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Legalities(Name alias, Table<LegalitiesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Legalities(Table<O> child, ForeignKey<O, LegalitiesRecord> key) {
        super(child, key, LEGALITIES);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<LegalitiesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_LEGALITIES;
    }

    @Override
    public UniqueKey<LegalitiesRecord> getPrimaryKey() {
        return Keys.PK_LEGALITIES;
    }

    @Override
    public List<UniqueKey<LegalitiesRecord>> getKeys() {
        return Arrays.<UniqueKey<LegalitiesRecord>>asList(Keys.PK_LEGALITIES);
    }

    @Override
    public List<ForeignKey<LegalitiesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LegalitiesRecord, ?>>asList(Keys.FK_LEGALITIES_CARDS_1);
    }

    public Cards cards() {
        return new Cards(this, Keys.FK_LEGALITIES_CARDS_1);
    }

    @Override
    public Legalities as(String alias) {
        return new Legalities(DSL.name(alias), this);
    }

    @Override
    public Legalities as(Name alias) {
        return new Legalities(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Legalities rename(String name) {
        return new Legalities(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Legalities rename(Name name) {
        return new Legalities(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
