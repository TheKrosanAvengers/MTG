/*
 * This file is generated by jOOQ.
 */
package com.mtgjson.tables;


import com.mtgjson.DefaultSchema;
import com.mtgjson.Indexes;
import com.mtgjson.Keys;
import com.mtgjson.tables.records.SetsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row21;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sets extends TableImpl<SetsRecord> {

    private static final long serialVersionUID = 390549833;

    /**
     * The reference instance of <code>sets</code>
     */
    public static final Sets SETS = new Sets();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SetsRecord> getRecordType() {
        return SetsRecord.class;
    }

    /**
     * The column <code>sets.id</code>.
     */
    public final TableField<SetsRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>sets.baseSetSize</code>.
     */
    public final TableField<SetsRecord, Integer> BASESETSIZE = createField(DSL.name("baseSetSize"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>sets.block</code>.
     */
    public final TableField<SetsRecord, String> BLOCK = createField(DSL.name("block"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>sets.boosterV3</code>.
     */
    public final TableField<SetsRecord, String> BOOSTERV3 = createField(DSL.name("boosterV3"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>sets.code</code>.
     */
    public final TableField<SetsRecord, String> CODE = createField(DSL.name("code"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>sets.codeV3</code>.
     */
    public final TableField<SetsRecord, String> CODEV3 = createField(DSL.name("codeV3"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>sets.isFoilOnly</code>.
     */
    public final TableField<SetsRecord, Integer> ISFOILONLY = createField(DSL.name("isFoilOnly"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>sets.isForeignOnly</code>.
     */
    public final TableField<SetsRecord, Integer> ISFOREIGNONLY = createField(DSL.name("isForeignOnly"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>sets.isOnlineOnly</code>.
     */
    public final TableField<SetsRecord, Integer> ISONLINEONLY = createField(DSL.name("isOnlineOnly"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>sets.isPartialPreview</code>.
     */
    public final TableField<SetsRecord, Integer> ISPARTIALPREVIEW = createField(DSL.name("isPartialPreview"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>sets.keyruneCode</code>.
     */
    public final TableField<SetsRecord, String> KEYRUNECODE = createField(DSL.name("keyruneCode"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>sets.mcmId</code>.
     */
    public final TableField<SetsRecord, Integer> MCMID = createField(DSL.name("mcmId"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>sets.mcmName</code>.
     */
    public final TableField<SetsRecord, String> MCMNAME = createField(DSL.name("mcmName"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>sets.meta</code>.
     */
    public final TableField<SetsRecord, String> META = createField(DSL.name("meta"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>sets.mtgoCode</code>.
     */
    public final TableField<SetsRecord, String> MTGOCODE = createField(DSL.name("mtgoCode"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>sets.name</code>.
     */
    public final TableField<SetsRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>sets.parentCode</code>.
     */
    public final TableField<SetsRecord, String> PARENTCODE = createField(DSL.name("parentCode"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>sets.releaseDate</code>.
     */
    public final TableField<SetsRecord, String> RELEASEDATE = createField(DSL.name("releaseDate"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>sets.tcgplayerGroupId</code>.
     */
    public final TableField<SetsRecord, Integer> TCGPLAYERGROUPID = createField(DSL.name("tcgplayerGroupId"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>sets.totalSetSize</code>.
     */
    public final TableField<SetsRecord, Integer> TOTALSETSIZE = createField(DSL.name("totalSetSize"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>sets.type</code>.
     */
    public final TableField<SetsRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>sets</code> table reference
     */
    public Sets() {
        this(DSL.name("sets"), null);
    }

    /**
     * Create an aliased <code>sets</code> table reference
     */
    public Sets(String alias) {
        this(DSL.name(alias), SETS);
    }

    /**
     * Create an aliased <code>sets</code> table reference
     */
    public Sets(Name alias) {
        this(alias, SETS);
    }

    private Sets(Name alias, Table<SetsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Sets(Name alias, Table<SetsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Sets(Table<O> child, ForeignKey<O, SetsRecord> key) {
        super(child, key, SETS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SQLITE_AUTOINDEX_SETS_1);
    }

    @Override
    public Identity<SetsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SETS;
    }

    @Override
    public UniqueKey<SetsRecord> getPrimaryKey() {
        return Keys.PK_SETS;
    }

    @Override
    public List<UniqueKey<SetsRecord>> getKeys() {
        return Arrays.<UniqueKey<SetsRecord>>asList(Keys.PK_SETS, Keys.SQLITE_AUTOINDEX_SETS_1);
    }

    @Override
    public Sets as(String alias) {
        return new Sets(DSL.name(alias), this);
    }

    @Override
    public Sets as(Name alias) {
        return new Sets(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sets rename(String name) {
        return new Sets(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sets rename(Name name) {
        return new Sets(name, null);
    }

    // -------------------------------------------------------------------------
    // Row21 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row21<Integer, Integer, String, String, String, String, Integer, Integer, Integer, Integer, String, Integer, String, String, String, String, String, String, Integer, Integer, String> fieldsRow() {
        return (Row21) super.fieldsRow();
    }
}
