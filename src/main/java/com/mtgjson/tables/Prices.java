/*
 * This file is generated by jOOQ.
 */
package com.mtgjson.tables;


import com.mtgjson.DefaultSchema;
import com.mtgjson.Keys;
import com.mtgjson.tables.records.PricesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Prices extends TableImpl<PricesRecord> {

    private static final long serialVersionUID = 2035365806;

    /**
     * The reference instance of <code>prices</code>
     */
    public static final Prices PRICES = new Prices();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PricesRecord> getRecordType() {
        return PricesRecord.class;
    }

    /**
     * The column <code>prices.id</code>.
     */
    public final TableField<PricesRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>prices.date</code>.
     */
    public final TableField<PricesRecord, String> DATE = createField(DSL.name("date"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>prices.price</code>.
     */
    public final TableField<PricesRecord, Float> PRICE = createField(DSL.name("price"), org.jooq.impl.SQLDataType.REAL, this, "");

    /**
     * The column <code>prices.type</code>.
     */
    public final TableField<PricesRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>prices.uuid</code>.
     */
    public final TableField<PricesRecord, String> UUID = createField(DSL.name("uuid"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>prices</code> table reference
     */
    public Prices() {
        this(DSL.name("prices"), null);
    }

    /**
     * Create an aliased <code>prices</code> table reference
     */
    public Prices(String alias) {
        this(DSL.name(alias), PRICES);
    }

    /**
     * Create an aliased <code>prices</code> table reference
     */
    public Prices(Name alias) {
        this(alias, PRICES);
    }

    private Prices(Name alias, Table<PricesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Prices(Name alias, Table<PricesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Prices(Table<O> child, ForeignKey<O, PricesRecord> key) {
        super(child, key, PRICES);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<PricesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PRICES;
    }

    @Override
    public UniqueKey<PricesRecord> getPrimaryKey() {
        return Keys.PK_PRICES;
    }

    @Override
    public List<UniqueKey<PricesRecord>> getKeys() {
        return Arrays.<UniqueKey<PricesRecord>>asList(Keys.PK_PRICES);
    }

    @Override
    public List<ForeignKey<PricesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PricesRecord, ?>>asList(Keys.FK_PRICES_CARDS_1);
    }

    public Cards cards() {
        return new Cards(this, Keys.FK_PRICES_CARDS_1);
    }

    @Override
    public Prices as(String alias) {
        return new Prices(DSL.name(alias), this);
    }

    @Override
    public Prices as(Name alias) {
        return new Prices(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Prices rename(String name) {
        return new Prices(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Prices rename(Name name) {
        return new Prices(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, Float, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
