/*
 * This file is generated by jOOQ.
 */
package com.mtgjson.tables.daos;


import com.mtgjson.tables.SetTranslations;
import com.mtgjson.tables.records.SetTranslationsRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SetTranslationsDao extends DAOImpl<SetTranslationsRecord, com.mtgjson.tables.pojos.SetTranslations, Integer> {

    /**
     * Create a new SetTranslationsDao without any configuration
     */
    public SetTranslationsDao() {
        super(SetTranslations.SET_TRANSLATIONS, com.mtgjson.tables.pojos.SetTranslations.class);
    }

    /**
     * Create a new SetTranslationsDao with an attached configuration
     */
    public SetTranslationsDao(Configuration configuration) {
        super(SetTranslations.SET_TRANSLATIONS, com.mtgjson.tables.pojos.SetTranslations.class, configuration);
    }

    @Override
    public Integer getId(com.mtgjson.tables.pojos.SetTranslations object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.SetTranslations> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(SetTranslations.SET_TRANSLATIONS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.SetTranslations> fetchById(Integer... values) {
        return fetch(SetTranslations.SET_TRANSLATIONS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.mtgjson.tables.pojos.SetTranslations fetchOneById(Integer value) {
        return fetchOne(SetTranslations.SET_TRANSLATIONS.ID, value);
    }

    /**
     * Fetch records that have <code>language BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.SetTranslations> fetchRangeOfLanguage(String lowerInclusive, String upperInclusive) {
        return fetchRange(SetTranslations.SET_TRANSLATIONS.LANGUAGE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>language IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.SetTranslations> fetchByLanguage(String... values) {
        return fetch(SetTranslations.SET_TRANSLATIONS.LANGUAGE, values);
    }

    /**
     * Fetch records that have <code>setCode BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.SetTranslations> fetchRangeOfSetcode(String lowerInclusive, String upperInclusive) {
        return fetchRange(SetTranslations.SET_TRANSLATIONS.SETCODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>setCode IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.SetTranslations> fetchBySetcode(String... values) {
        return fetch(SetTranslations.SET_TRANSLATIONS.SETCODE, values);
    }

    /**
     * Fetch records that have <code>translation BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.SetTranslations> fetchRangeOfTranslation(String lowerInclusive, String upperInclusive) {
        return fetchRange(SetTranslations.SET_TRANSLATIONS.TRANSLATION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>translation IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.SetTranslations> fetchByTranslation(String... values) {
        return fetch(SetTranslations.SET_TRANSLATIONS.TRANSLATION, values);
    }
}
