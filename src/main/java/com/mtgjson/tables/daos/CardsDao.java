/*
 * This file is generated by jOOQ.
 */
package com.mtgjson.tables.daos;


import com.mtgjson.tables.Cards;
import com.mtgjson.tables.records.CardsRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CardsDao extends DAOImpl<CardsRecord, com.mtgjson.tables.pojos.Cards, Integer> {

    /**
     * Create a new CardsDao without any configuration
     */
    public CardsDao() {
        super(Cards.CARDS, com.mtgjson.tables.pojos.Cards.class);
    }

    /**
     * Create a new CardsDao with an attached configuration
     */
    public CardsDao(Configuration configuration) {
        super(Cards.CARDS, com.mtgjson.tables.pojos.Cards.class, configuration);
    }

    @Override
    public Integer getId(com.mtgjson.tables.pojos.Cards object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Cards.CARDS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchById(Integer... values) {
        return fetch(Cards.CARDS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.mtgjson.tables.pojos.Cards fetchOneById(Integer value) {
        return fetchOne(Cards.CARDS.ID, value);
    }

    /**
     * Fetch records that have <code>artist BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfArtist(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.ARTIST, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>artist IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByArtist(String... values) {
        return fetch(Cards.CARDS.ARTIST, values);
    }

    /**
     * Fetch records that have <code>borderColor BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfBordercolor(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.BORDERCOLOR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>borderColor IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByBordercolor(String... values) {
        return fetch(Cards.CARDS.BORDERCOLOR, values);
    }

    /**
     * Fetch records that have <code>colorIdentity BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfColoridentity(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.COLORIDENTITY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>colorIdentity IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByColoridentity(String... values) {
        return fetch(Cards.CARDS.COLORIDENTITY, values);
    }

    /**
     * Fetch records that have <code>colorIndicator BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfColorindicator(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.COLORINDICATOR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>colorIndicator IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByColorindicator(String... values) {
        return fetch(Cards.CARDS.COLORINDICATOR, values);
    }

    /**
     * Fetch records that have <code>colors BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfColors(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.COLORS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>colors IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByColors(String... values) {
        return fetch(Cards.CARDS.COLORS, values);
    }

    /**
     * Fetch records that have <code>convertedManaCost BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfConvertedmanacost(Float lowerInclusive, Float upperInclusive) {
        return fetchRange(Cards.CARDS.CONVERTEDMANACOST, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>convertedManaCost IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByConvertedmanacost(Float... values) {
        return fetch(Cards.CARDS.CONVERTEDMANACOST, values);
    }

    /**
     * Fetch records that have <code>duelDeck BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfDueldeck(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.DUELDECK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>duelDeck IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByDueldeck(String... values) {
        return fetch(Cards.CARDS.DUELDECK, values);
    }

    /**
     * Fetch records that have <code>edhrecRank BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfEdhrecrank(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.EDHRECRANK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>edhrecRank IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByEdhrecrank(String... values) {
        return fetch(Cards.CARDS.EDHRECRANK, values);
    }

    /**
     * Fetch records that have <code>faceConvertedManaCost BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfFaceconvertedmanacost(Float lowerInclusive, Float upperInclusive) {
        return fetchRange(Cards.CARDS.FACECONVERTEDMANACOST, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>faceConvertedManaCost IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByFaceconvertedmanacost(Float... values) {
        return fetch(Cards.CARDS.FACECONVERTEDMANACOST, values);
    }

    /**
     * Fetch records that have <code>flavorText BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfFlavortext(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.FLAVORTEXT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>flavorText IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByFlavortext(String... values) {
        return fetch(Cards.CARDS.FLAVORTEXT, values);
    }

    /**
     * Fetch records that have <code>frameEffect BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfFrameeffect(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.FRAMEEFFECT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>frameEffect IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByFrameeffect(String... values) {
        return fetch(Cards.CARDS.FRAMEEFFECT, values);
    }

    /**
     * Fetch records that have <code>frameEffects BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfFrameeffects(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.FRAMEEFFECTS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>frameEffects IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByFrameeffects(String... values) {
        return fetch(Cards.CARDS.FRAMEEFFECTS, values);
    }

    /**
     * Fetch records that have <code>frameVersion BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfFrameversion(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.FRAMEVERSION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>frameVersion IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByFrameversion(String... values) {
        return fetch(Cards.CARDS.FRAMEVERSION, values);
    }

    /**
     * Fetch records that have <code>hand BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfHand(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.HAND, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>hand IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByHand(String... values) {
        return fetch(Cards.CARDS.HAND, values);
    }

    /**
     * Fetch records that have <code>hasFoil BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfHasfoil(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Cards.CARDS.HASFOIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>hasFoil IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByHasfoil(Integer... values) {
        return fetch(Cards.CARDS.HASFOIL, values);
    }

    /**
     * Fetch records that have <code>hasNoDeckLimit BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfHasnodecklimit(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Cards.CARDS.HASNODECKLIMIT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>hasNoDeckLimit IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByHasnodecklimit(Integer... values) {
        return fetch(Cards.CARDS.HASNODECKLIMIT, values);
    }

    /**
     * Fetch records that have <code>hasNonFoil BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfHasnonfoil(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Cards.CARDS.HASNONFOIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>hasNonFoil IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByHasnonfoil(Integer... values) {
        return fetch(Cards.CARDS.HASNONFOIL, values);
    }

    /**
     * Fetch records that have <code>isAlternative BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfIsalternative(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Cards.CARDS.ISALTERNATIVE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>isAlternative IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByIsalternative(Integer... values) {
        return fetch(Cards.CARDS.ISALTERNATIVE, values);
    }

    /**
     * Fetch records that have <code>isArena BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfIsarena(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Cards.CARDS.ISARENA, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>isArena IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByIsarena(Integer... values) {
        return fetch(Cards.CARDS.ISARENA, values);
    }

    /**
     * Fetch records that have <code>isFullArt BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfIsfullart(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Cards.CARDS.ISFULLART, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>isFullArt IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByIsfullart(Integer... values) {
        return fetch(Cards.CARDS.ISFULLART, values);
    }

    /**
     * Fetch records that have <code>isMtgo BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfIsmtgo(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Cards.CARDS.ISMTGO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>isMtgo IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByIsmtgo(Integer... values) {
        return fetch(Cards.CARDS.ISMTGO, values);
    }

    /**
     * Fetch records that have <code>isOnlineOnly BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfIsonlineonly(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Cards.CARDS.ISONLINEONLY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>isOnlineOnly IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByIsonlineonly(Integer... values) {
        return fetch(Cards.CARDS.ISONLINEONLY, values);
    }

    /**
     * Fetch records that have <code>isOversized BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfIsoversized(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Cards.CARDS.ISOVERSIZED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>isOversized IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByIsoversized(Integer... values) {
        return fetch(Cards.CARDS.ISOVERSIZED, values);
    }

    /**
     * Fetch records that have <code>isPaper BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfIspaper(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Cards.CARDS.ISPAPER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>isPaper IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByIspaper(Integer... values) {
        return fetch(Cards.CARDS.ISPAPER, values);
    }

    /**
     * Fetch records that have <code>isPromo BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfIspromo(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Cards.CARDS.ISPROMO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>isPromo IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByIspromo(Integer... values) {
        return fetch(Cards.CARDS.ISPROMO, values);
    }

    /**
     * Fetch records that have <code>isReprint BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfIsreprint(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Cards.CARDS.ISREPRINT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>isReprint IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByIsreprint(Integer... values) {
        return fetch(Cards.CARDS.ISREPRINT, values);
    }

    /**
     * Fetch records that have <code>isReserved BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfIsreserved(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Cards.CARDS.ISRESERVED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>isReserved IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByIsreserved(Integer... values) {
        return fetch(Cards.CARDS.ISRESERVED, values);
    }

    /**
     * Fetch records that have <code>isStarter BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfIsstarter(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Cards.CARDS.ISSTARTER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>isStarter IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByIsstarter(Integer... values) {
        return fetch(Cards.CARDS.ISSTARTER, values);
    }

    /**
     * Fetch records that have <code>isStorySpotlight BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfIsstoryspotlight(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Cards.CARDS.ISSTORYSPOTLIGHT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>isStorySpotlight IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByIsstoryspotlight(Integer... values) {
        return fetch(Cards.CARDS.ISSTORYSPOTLIGHT, values);
    }

    /**
     * Fetch records that have <code>isTextless BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfIstextless(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Cards.CARDS.ISTEXTLESS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>isTextless IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByIstextless(Integer... values) {
        return fetch(Cards.CARDS.ISTEXTLESS, values);
    }

    /**
     * Fetch records that have <code>isTimeshifted BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfIstimeshifted(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Cards.CARDS.ISTIMESHIFTED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>isTimeshifted IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByIstimeshifted(Integer... values) {
        return fetch(Cards.CARDS.ISTIMESHIFTED, values);
    }

    /**
     * Fetch records that have <code>layout BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfLayout(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.LAYOUT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>layout IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByLayout(String... values) {
        return fetch(Cards.CARDS.LAYOUT, values);
    }

    /**
     * Fetch records that have <code>leadershipSkills BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfLeadershipskills(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.LEADERSHIPSKILLS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>leadershipSkills IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByLeadershipskills(String... values) {
        return fetch(Cards.CARDS.LEADERSHIPSKILLS, values);
    }

    /**
     * Fetch records that have <code>life BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfLife(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.LIFE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>life IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByLife(String... values) {
        return fetch(Cards.CARDS.LIFE, values);
    }

    /**
     * Fetch records that have <code>loyalty BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfLoyalty(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.LOYALTY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>loyalty IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByLoyalty(String... values) {
        return fetch(Cards.CARDS.LOYALTY, values);
    }

    /**
     * Fetch records that have <code>manaCost BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfManacost(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.MANACOST, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>manaCost IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByManacost(String... values) {
        return fetch(Cards.CARDS.MANACOST, values);
    }

    /**
     * Fetch records that have <code>mcmId BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfMcmid(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Cards.CARDS.MCMID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>mcmId IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByMcmid(Integer... values) {
        return fetch(Cards.CARDS.MCMID, values);
    }

    /**
     * Fetch records that have <code>mcmMetaId BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfMcmmetaid(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Cards.CARDS.MCMMETAID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>mcmMetaId IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByMcmmetaid(Integer... values) {
        return fetch(Cards.CARDS.MCMMETAID, values);
    }

    /**
     * Fetch records that have <code>mcmName BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfMcmname(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.MCMNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>mcmName IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByMcmname(String... values) {
        return fetch(Cards.CARDS.MCMNAME, values);
    }

    /**
     * Fetch records that have <code>mtgArenaId BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfMtgarenaid(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Cards.CARDS.MTGARENAID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>mtgArenaId IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByMtgarenaid(Integer... values) {
        return fetch(Cards.CARDS.MTGARENAID, values);
    }

    /**
     * Fetch records that have <code>mtgoFoilId BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfMtgofoilid(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Cards.CARDS.MTGOFOILID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>mtgoFoilId IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByMtgofoilid(Integer... values) {
        return fetch(Cards.CARDS.MTGOFOILID, values);
    }

    /**
     * Fetch records that have <code>mtgoId BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfMtgoid(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Cards.CARDS.MTGOID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>mtgoId IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByMtgoid(Integer... values) {
        return fetch(Cards.CARDS.MTGOID, values);
    }

    /**
     * Fetch records that have <code>mtgstocksId BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfMtgstocksid(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Cards.CARDS.MTGSTOCKSID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>mtgstocksId IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByMtgstocksid(Integer... values) {
        return fetch(Cards.CARDS.MTGSTOCKSID, values);
    }

    /**
     * Fetch records that have <code>multiverseId BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfMultiverseid(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Cards.CARDS.MULTIVERSEID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>multiverseId IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByMultiverseid(Integer... values) {
        return fetch(Cards.CARDS.MULTIVERSEID, values);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByName(String... values) {
        return fetch(Cards.CARDS.NAME, values);
    }

    /**
     * Fetch records that have <code>names BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfNames(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.NAMES, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>names IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByNames(String... values) {
        return fetch(Cards.CARDS.NAMES, values);
    }

    /**
     * Fetch records that have <code>number BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfNumber(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.NUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>number IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByNumber(String... values) {
        return fetch(Cards.CARDS.NUMBER, values);
    }

    /**
     * Fetch records that have <code>originalText BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfOriginaltext(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.ORIGINALTEXT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>originalText IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByOriginaltext(String... values) {
        return fetch(Cards.CARDS.ORIGINALTEXT, values);
    }

    /**
     * Fetch records that have <code>originalType BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfOriginaltype(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.ORIGINALTYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>originalType IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByOriginaltype(String... values) {
        return fetch(Cards.CARDS.ORIGINALTYPE, values);
    }

    /**
     * Fetch records that have <code>otherFaceIds BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfOtherfaceids(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.OTHERFACEIDS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>otherFaceIds IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByOtherfaceids(String... values) {
        return fetch(Cards.CARDS.OTHERFACEIDS, values);
    }

    /**
     * Fetch records that have <code>power BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfPower(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.POWER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>power IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByPower(String... values) {
        return fetch(Cards.CARDS.POWER, values);
    }

    /**
     * Fetch records that have <code>printings BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfPrintings(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.PRINTINGS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>printings IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByPrintings(String... values) {
        return fetch(Cards.CARDS.PRINTINGS, values);
    }

    /**
     * Fetch records that have <code>purchaseUrls BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfPurchaseurls(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.PURCHASEURLS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>purchaseUrls IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByPurchaseurls(String... values) {
        return fetch(Cards.CARDS.PURCHASEURLS, values);
    }

    /**
     * Fetch records that have <code>rarity BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfRarity(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.RARITY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>rarity IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByRarity(String... values) {
        return fetch(Cards.CARDS.RARITY, values);
    }

    /**
     * Fetch records that have <code>scryfallId BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfScryfallid(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.SCRYFALLID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>scryfallId IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByScryfallid(String... values) {
        return fetch(Cards.CARDS.SCRYFALLID, values);
    }

    /**
     * Fetch records that have <code>scryfallIllustrationId BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfScryfallillustrationid(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.SCRYFALLILLUSTRATIONID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>scryfallIllustrationId IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByScryfallillustrationid(String... values) {
        return fetch(Cards.CARDS.SCRYFALLILLUSTRATIONID, values);
    }

    /**
     * Fetch records that have <code>scryfallOracleId BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfScryfalloracleid(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.SCRYFALLORACLEID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>scryfallOracleId IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByScryfalloracleid(String... values) {
        return fetch(Cards.CARDS.SCRYFALLORACLEID, values);
    }

    /**
     * Fetch records that have <code>setCode BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfSetcode(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.SETCODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>setCode IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchBySetcode(String... values) {
        return fetch(Cards.CARDS.SETCODE, values);
    }

    /**
     * Fetch records that have <code>side BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfSide(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.SIDE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>side IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchBySide(String... values) {
        return fetch(Cards.CARDS.SIDE, values);
    }

    /**
     * Fetch records that have <code>subtypes BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfSubtypes(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.SUBTYPES, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>subtypes IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchBySubtypes(String... values) {
        return fetch(Cards.CARDS.SUBTYPES, values);
    }

    /**
     * Fetch records that have <code>supertypes BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfSupertypes(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.SUPERTYPES, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>supertypes IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchBySupertypes(String... values) {
        return fetch(Cards.CARDS.SUPERTYPES, values);
    }

    /**
     * Fetch records that have <code>tcgplayerProductId BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfTcgplayerproductid(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Cards.CARDS.TCGPLAYERPRODUCTID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tcgplayerProductId IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByTcgplayerproductid(Integer... values) {
        return fetch(Cards.CARDS.TCGPLAYERPRODUCTID, values);
    }

    /**
     * Fetch records that have <code>tcgplayerPurchaseUrl BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfTcgplayerpurchaseurl(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.TCGPLAYERPURCHASEURL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tcgplayerPurchaseUrl IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByTcgplayerpurchaseurl(String... values) {
        return fetch(Cards.CARDS.TCGPLAYERPURCHASEURL, values);
    }

    /**
     * Fetch records that have <code>text BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfText(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.TEXT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>text IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByText(String... values) {
        return fetch(Cards.CARDS.TEXT, values);
    }

    /**
     * Fetch records that have <code>toughness BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfToughness(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.TOUGHNESS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>toughness IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByToughness(String... values) {
        return fetch(Cards.CARDS.TOUGHNESS, values);
    }

    /**
     * Fetch records that have <code>type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfType(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByType(String... values) {
        return fetch(Cards.CARDS.TYPE, values);
    }

    /**
     * Fetch records that have <code>types BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfTypes(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.TYPES, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>types IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByTypes(String... values) {
        return fetch(Cards.CARDS.TYPES, values);
    }

    /**
     * Fetch records that have <code>uuid BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfUuid(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>uuid IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByUuid(String... values) {
        return fetch(Cards.CARDS.UUID, values);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public com.mtgjson.tables.pojos.Cards fetchOneByUuid(String value) {
        return fetchOne(Cards.CARDS.UUID, value);
    }

    /**
     * Fetch records that have <code>variations BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfVariations(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.VARIATIONS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>variations IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByVariations(String... values) {
        return fetch(Cards.CARDS.VARIATIONS, values);
    }

    /**
     * Fetch records that have <code>watermark BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchRangeOfWatermark(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.WATERMARK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>watermark IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Cards> fetchByWatermark(String... values) {
        return fetch(Cards.CARDS.WATERMARK, values);
    }
}
