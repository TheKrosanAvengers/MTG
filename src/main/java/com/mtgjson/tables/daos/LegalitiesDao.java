/*
 * This file is generated by jOOQ.
 */
package com.mtgjson.tables.daos;


import com.mtgjson.tables.Legalities;
import com.mtgjson.tables.records.LegalitiesRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LegalitiesDao extends DAOImpl<LegalitiesRecord, com.mtgjson.tables.pojos.Legalities, Integer> {

    /**
     * Create a new LegalitiesDao without any configuration
     */
    public LegalitiesDao() {
        super(Legalities.LEGALITIES, com.mtgjson.tables.pojos.Legalities.class);
    }

    /**
     * Create a new LegalitiesDao with an attached configuration
     */
    public LegalitiesDao(Configuration configuration) {
        super(Legalities.LEGALITIES, com.mtgjson.tables.pojos.Legalities.class, configuration);
    }

    @Override
    public Integer getId(com.mtgjson.tables.pojos.Legalities object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Legalities> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Legalities.LEGALITIES.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Legalities> fetchById(Integer... values) {
        return fetch(Legalities.LEGALITIES.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.mtgjson.tables.pojos.Legalities fetchOneById(Integer value) {
        return fetchOne(Legalities.LEGALITIES.ID, value);
    }

    /**
     * Fetch records that have <code>format BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Legalities> fetchRangeOfFormat(String lowerInclusive, String upperInclusive) {
        return fetchRange(Legalities.LEGALITIES.FORMAT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>format IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Legalities> fetchByFormat(String... values) {
        return fetch(Legalities.LEGALITIES.FORMAT, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Legalities> fetchRangeOfStatus(String lowerInclusive, String upperInclusive) {
        return fetchRange(Legalities.LEGALITIES.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Legalities> fetchByStatus(String... values) {
        return fetch(Legalities.LEGALITIES.STATUS, values);
    }

    /**
     * Fetch records that have <code>uuid BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.mtgjson.tables.pojos.Legalities> fetchRangeOfUuid(String lowerInclusive, String upperInclusive) {
        return fetchRange(Legalities.LEGALITIES.UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>uuid IN (values)</code>
     */
    public List<com.mtgjson.tables.pojos.Legalities> fetchByUuid(String... values) {
        return fetch(Legalities.LEGALITIES.UUID, values);
    }
}
