/*
 * This file is generated by jOOQ.
 */
package com.mtgjson.tables;


import com.mtgjson.DefaultSchema;
import com.mtgjson.Indexes;
import com.mtgjson.Keys;
import com.mtgjson.tables.records.CardsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cards extends TableImpl<CardsRecord> {

    private static final long serialVersionUID = 736451726;

    /**
     * The reference instance of <code>cards</code>
     */
    public static final Cards CARDS = new Cards();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CardsRecord> getRecordType() {
        return CardsRecord.class;
    }

    /**
     * The column <code>cards.id</code>.
     */
    public final TableField<CardsRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>cards.artist</code>.
     */
    public final TableField<CardsRecord, String> ARTIST = createField(DSL.name("artist"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.borderColor</code>.
     */
    public final TableField<CardsRecord, String> BORDERCOLOR = createField(DSL.name("borderColor"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.colorIdentity</code>.
     */
    public final TableField<CardsRecord, String> COLORIDENTITY = createField(DSL.name("colorIdentity"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.colorIndicator</code>.
     */
    public final TableField<CardsRecord, String> COLORINDICATOR = createField(DSL.name("colorIndicator"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.colors</code>.
     */
    public final TableField<CardsRecord, String> COLORS = createField(DSL.name("colors"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.convertedManaCost</code>.
     */
    public final TableField<CardsRecord, Float> CONVERTEDMANACOST = createField(DSL.name("convertedManaCost"), org.jooq.impl.SQLDataType.REAL, this, "");

    /**
     * The column <code>cards.duelDeck</code>.
     */
    public final TableField<CardsRecord, String> DUELDECK = createField(DSL.name("duelDeck"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.edhrecRank</code>.
     */
    public final TableField<CardsRecord, String> EDHRECRANK = createField(DSL.name("edhrecRank"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.faceConvertedManaCost</code>.
     */
    public final TableField<CardsRecord, Float> FACECONVERTEDMANACOST = createField(DSL.name("faceConvertedManaCost"), org.jooq.impl.SQLDataType.REAL, this, "");

    /**
     * The column <code>cards.flavorText</code>.
     */
    public final TableField<CardsRecord, String> FLAVORTEXT = createField(DSL.name("flavorText"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.frameEffect</code>.
     */
    public final TableField<CardsRecord, String> FRAMEEFFECT = createField(DSL.name("frameEffect"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.frameEffects</code>.
     */
    public final TableField<CardsRecord, String> FRAMEEFFECTS = createField(DSL.name("frameEffects"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.frameVersion</code>.
     */
    public final TableField<CardsRecord, String> FRAMEVERSION = createField(DSL.name("frameVersion"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.hand</code>.
     */
    public final TableField<CardsRecord, String> HAND = createField(DSL.name("hand"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.hasFoil</code>.
     */
    public final TableField<CardsRecord, Integer> HASFOIL = createField(DSL.name("hasFoil"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>cards.hasNoDeckLimit</code>.
     */
    public final TableField<CardsRecord, Integer> HASNODECKLIMIT = createField(DSL.name("hasNoDeckLimit"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>cards.hasNonFoil</code>.
     */
    public final TableField<CardsRecord, Integer> HASNONFOIL = createField(DSL.name("hasNonFoil"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>cards.isAlternative</code>.
     */
    public final TableField<CardsRecord, Integer> ISALTERNATIVE = createField(DSL.name("isAlternative"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>cards.isArena</code>.
     */
    public final TableField<CardsRecord, Integer> ISARENA = createField(DSL.name("isArena"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>cards.isFullArt</code>.
     */
    public final TableField<CardsRecord, Integer> ISFULLART = createField(DSL.name("isFullArt"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>cards.isMtgo</code>.
     */
    public final TableField<CardsRecord, Integer> ISMTGO = createField(DSL.name("isMtgo"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>cards.isOnlineOnly</code>.
     */
    public final TableField<CardsRecord, Integer> ISONLINEONLY = createField(DSL.name("isOnlineOnly"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>cards.isOversized</code>.
     */
    public final TableField<CardsRecord, Integer> ISOVERSIZED = createField(DSL.name("isOversized"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>cards.isPaper</code>.
     */
    public final TableField<CardsRecord, Integer> ISPAPER = createField(DSL.name("isPaper"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>cards.isPromo</code>.
     */
    public final TableField<CardsRecord, Integer> ISPROMO = createField(DSL.name("isPromo"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>cards.isReprint</code>.
     */
    public final TableField<CardsRecord, Integer> ISREPRINT = createField(DSL.name("isReprint"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>cards.isReserved</code>.
     */
    public final TableField<CardsRecord, Integer> ISRESERVED = createField(DSL.name("isReserved"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>cards.isStarter</code>.
     */
    public final TableField<CardsRecord, Integer> ISSTARTER = createField(DSL.name("isStarter"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>cards.isStorySpotlight</code>.
     */
    public final TableField<CardsRecord, Integer> ISSTORYSPOTLIGHT = createField(DSL.name("isStorySpotlight"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>cards.isTextless</code>.
     */
    public final TableField<CardsRecord, Integer> ISTEXTLESS = createField(DSL.name("isTextless"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>cards.isTimeshifted</code>.
     */
    public final TableField<CardsRecord, Integer> ISTIMESHIFTED = createField(DSL.name("isTimeshifted"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>cards.layout</code>.
     */
    public final TableField<CardsRecord, String> LAYOUT = createField(DSL.name("layout"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.leadershipSkills</code>.
     */
    public final TableField<CardsRecord, String> LEADERSHIPSKILLS = createField(DSL.name("leadershipSkills"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.life</code>.
     */
    public final TableField<CardsRecord, String> LIFE = createField(DSL.name("life"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.loyalty</code>.
     */
    public final TableField<CardsRecord, String> LOYALTY = createField(DSL.name("loyalty"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.manaCost</code>.
     */
    public final TableField<CardsRecord, String> MANACOST = createField(DSL.name("manaCost"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.mcmId</code>.
     */
    public final TableField<CardsRecord, Integer> MCMID = createField(DSL.name("mcmId"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>cards.mcmMetaId</code>.
     */
    public final TableField<CardsRecord, Integer> MCMMETAID = createField(DSL.name("mcmMetaId"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>cards.mcmName</code>.
     */
    public final TableField<CardsRecord, String> MCMNAME = createField(DSL.name("mcmName"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.mtgArenaId</code>.
     */
    public final TableField<CardsRecord, Integer> MTGARENAID = createField(DSL.name("mtgArenaId"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>cards.mtgoFoilId</code>.
     */
    public final TableField<CardsRecord, Integer> MTGOFOILID = createField(DSL.name("mtgoFoilId"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>cards.mtgoId</code>.
     */
    public final TableField<CardsRecord, Integer> MTGOID = createField(DSL.name("mtgoId"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>cards.mtgstocksId</code>.
     */
    public final TableField<CardsRecord, Integer> MTGSTOCKSID = createField(DSL.name("mtgstocksId"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>cards.multiverseId</code>.
     */
    public final TableField<CardsRecord, Integer> MULTIVERSEID = createField(DSL.name("multiverseId"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>cards.name</code>.
     */
    public final TableField<CardsRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.names</code>.
     */
    public final TableField<CardsRecord, String> NAMES = createField(DSL.name("names"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.number</code>.
     */
    public final TableField<CardsRecord, String> NUMBER = createField(DSL.name("number"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.originalText</code>.
     */
    public final TableField<CardsRecord, String> ORIGINALTEXT = createField(DSL.name("originalText"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.originalType</code>.
     */
    public final TableField<CardsRecord, String> ORIGINALTYPE = createField(DSL.name("originalType"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.otherFaceIds</code>.
     */
    public final TableField<CardsRecord, String> OTHERFACEIDS = createField(DSL.name("otherFaceIds"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.power</code>.
     */
    public final TableField<CardsRecord, String> POWER = createField(DSL.name("power"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.printings</code>.
     */
    public final TableField<CardsRecord, String> PRINTINGS = createField(DSL.name("printings"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.purchaseUrls</code>.
     */
    public final TableField<CardsRecord, String> PURCHASEURLS = createField(DSL.name("purchaseUrls"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.rarity</code>.
     */
    public final TableField<CardsRecord, String> RARITY = createField(DSL.name("rarity"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.scryfallId</code>.
     */
    public final TableField<CardsRecord, String> SCRYFALLID = createField(DSL.name("scryfallId"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.scryfallIllustrationId</code>.
     */
    public final TableField<CardsRecord, String> SCRYFALLILLUSTRATIONID = createField(DSL.name("scryfallIllustrationId"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.scryfallOracleId</code>.
     */
    public final TableField<CardsRecord, String> SCRYFALLORACLEID = createField(DSL.name("scryfallOracleId"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.setCode</code>.
     */
    public final TableField<CardsRecord, String> SETCODE = createField(DSL.name("setCode"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.side</code>.
     */
    public final TableField<CardsRecord, String> SIDE = createField(DSL.name("side"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.subtypes</code>.
     */
    public final TableField<CardsRecord, String> SUBTYPES = createField(DSL.name("subtypes"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.supertypes</code>.
     */
    public final TableField<CardsRecord, String> SUPERTYPES = createField(DSL.name("supertypes"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.tcgplayerProductId</code>.
     */
    public final TableField<CardsRecord, Integer> TCGPLAYERPRODUCTID = createField(DSL.name("tcgplayerProductId"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>cards.tcgplayerPurchaseUrl</code>.
     */
    public final TableField<CardsRecord, String> TCGPLAYERPURCHASEURL = createField(DSL.name("tcgplayerPurchaseUrl"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.text</code>.
     */
    public final TableField<CardsRecord, String> TEXT = createField(DSL.name("text"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.toughness</code>.
     */
    public final TableField<CardsRecord, String> TOUGHNESS = createField(DSL.name("toughness"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.type</code>.
     */
    public final TableField<CardsRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.types</code>.
     */
    public final TableField<CardsRecord, String> TYPES = createField(DSL.name("types"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.uuid</code>.
     */
    public final TableField<CardsRecord, String> UUID = createField(DSL.name("uuid"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>cards.variations</code>.
     */
    public final TableField<CardsRecord, String> VARIATIONS = createField(DSL.name("variations"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cards.watermark</code>.
     */
    public final TableField<CardsRecord, String> WATERMARK = createField(DSL.name("watermark"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>cards</code> table reference
     */
    public Cards() {
        this(DSL.name("cards"), null);
    }

    /**
     * Create an aliased <code>cards</code> table reference
     */
    public Cards(String alias) {
        this(DSL.name(alias), CARDS);
    }

    /**
     * Create an aliased <code>cards</code> table reference
     */
    public Cards(Name alias) {
        this(alias, CARDS);
    }

    private Cards(Name alias, Table<CardsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Cards(Name alias, Table<CardsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Cards(Table<O> child, ForeignKey<O, CardsRecord> key) {
        super(child, key, CARDS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SQLITE_AUTOINDEX_CARDS_1);
    }

    @Override
    public Identity<CardsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CARDS;
    }

    @Override
    public UniqueKey<CardsRecord> getPrimaryKey() {
        return Keys.PK_CARDS;
    }

    @Override
    public List<UniqueKey<CardsRecord>> getKeys() {
        return Arrays.<UniqueKey<CardsRecord>>asList(Keys.PK_CARDS, Keys.SQLITE_AUTOINDEX_CARDS_1);
    }

    @Override
    public List<ForeignKey<CardsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CardsRecord, ?>>asList(Keys.FK_CARDS_SETS_1);
    }

    public Sets sets() {
        return new Sets(this, Keys.FK_CARDS_SETS_1);
    }

    @Override
    public Cards as(String alias) {
        return new Cards(DSL.name(alias), this);
    }

    @Override
    public Cards as(Name alias) {
        return new Cards(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cards rename(String name) {
        return new Cards(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cards rename(Name name) {
        return new Cards(name, null);
    }
}
