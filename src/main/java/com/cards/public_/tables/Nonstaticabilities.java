/*
 * This file is generated by jOOQ.
 */
package com.cards.public_.tables;


import com.cards.public_.Indexes;
import com.cards.public_.Keys;
import com.cards.public_.Public;
import com.cards.public_.tables.records.NonstaticabilitiesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Nonstaticabilities extends TableImpl<NonstaticabilitiesRecord> {

    private static final long serialVersionUID = 839008540;

    /**
     * The reference instance of <code>PUBLIC.NONSTATICABILITIES</code>
     */
    public static final Nonstaticabilities NONSTATICABILITIES = new Nonstaticabilities();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NonstaticabilitiesRecord> getRecordType() {
        return NonstaticabilitiesRecord.class;
    }

    /**
     * The column <code>PUBLIC.NONSTATICABILITIES.ID</code>.
     */
    public final TableField<NonstaticabilitiesRecord, Long> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.NONSTATICABILITIES.TEXT</code>.
     */
    public final TableField<NonstaticabilitiesRecord, String> TEXT = createField(DSL.name("TEXT"), org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * Create a <code>PUBLIC.NONSTATICABILITIES</code> table reference
     */
    public Nonstaticabilities() {
        this(DSL.name("NONSTATICABILITIES"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.NONSTATICABILITIES</code> table reference
     */
    public Nonstaticabilities(String alias) {
        this(DSL.name(alias), NONSTATICABILITIES);
    }

    /**
     * Create an aliased <code>PUBLIC.NONSTATICABILITIES</code> table reference
     */
    public Nonstaticabilities(Name alias) {
        this(alias, NONSTATICABILITIES);
    }

    private Nonstaticabilities(Name alias, Table<NonstaticabilitiesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Nonstaticabilities(Name alias, Table<NonstaticabilitiesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Nonstaticabilities(Table<O> child, ForeignKey<O, NonstaticabilitiesRecord> key) {
        super(child, key, NONSTATICABILITIES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONSTRAINT_INDEX_4, Indexes.PRIMARY_KEY_4);
    }

    @Override
    public Identity<NonstaticabilitiesRecord, Long> getIdentity() {
        return Keys.IDENTITY_NONSTATICABILITIES;
    }

    @Override
    public UniqueKey<NonstaticabilitiesRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_4;
    }

    @Override
    public List<UniqueKey<NonstaticabilitiesRecord>> getKeys() {
        return Arrays.<UniqueKey<NonstaticabilitiesRecord>>asList(Keys.CONSTRAINT_4, Keys.CONSTRAINT_45);
    }

    @Override
    public Nonstaticabilities as(String alias) {
        return new Nonstaticabilities(DSL.name(alias), this);
    }

    @Override
    public Nonstaticabilities as(Name alias) {
        return new Nonstaticabilities(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Nonstaticabilities rename(String name) {
        return new Nonstaticabilities(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Nonstaticabilities rename(Name name) {
        return new Nonstaticabilities(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
