/*
 * This file is generated by jOOQ.
 */
package com.cards.public_.tables;


import com.cards.public_.Indexes;
import com.cards.public_.Keys;
import com.cards.public_.Public;
import com.cards.public_.tables.records.CardsupertypesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cardsupertypes extends TableImpl<CardsupertypesRecord> {

    private static final long serialVersionUID = 438767018;

    /**
     * The reference instance of <code>PUBLIC.CARDSUPERTYPES</code>
     */
    public static final Cardsupertypes CARDSUPERTYPES = new Cardsupertypes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CardsupertypesRecord> getRecordType() {
        return CardsupertypesRecord.class;
    }

    /**
     * The column <code>PUBLIC.CARDSUPERTYPES.ID</code>.
     */
    public final TableField<CardsupertypesRecord, Long> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.CARDSUPERTYPES.SUPERTYPE</code>.
     */
    public final TableField<CardsupertypesRecord, Long> SUPERTYPE = createField(DSL.name("SUPERTYPE"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>PUBLIC.CARDSUPERTYPES.CARD</code>.
     */
    public final TableField<CardsupertypesRecord, Long> CARD = createField(DSL.name("CARD"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>PUBLIC.CARDSUPERTYPES</code> table reference
     */
    public Cardsupertypes() {
        this(DSL.name("CARDSUPERTYPES"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.CARDSUPERTYPES</code> table reference
     */
    public Cardsupertypes(String alias) {
        this(DSL.name(alias), CARDSUPERTYPES);
    }

    /**
     * Create an aliased <code>PUBLIC.CARDSUPERTYPES</code> table reference
     */
    public Cardsupertypes(Name alias) {
        this(alias, CARDSUPERTYPES);
    }

    private Cardsupertypes(Name alias, Table<CardsupertypesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Cardsupertypes(Name alias, Table<CardsupertypesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Cardsupertypes(Table<O> child, ForeignKey<O, CardsupertypesRecord> key) {
        super(child, key, CARDSUPERTYPES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONSTRAINT_INDEX_6, Indexes.CONSTRAINT_INDEX_67, Indexes.PRIMARY_KEY_6);
    }

    @Override
    public Identity<CardsupertypesRecord, Long> getIdentity() {
        return Keys.IDENTITY_CARDSUPERTYPES;
    }

    @Override
    public UniqueKey<CardsupertypesRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_6;
    }

    @Override
    public List<UniqueKey<CardsupertypesRecord>> getKeys() {
        return Arrays.<UniqueKey<CardsupertypesRecord>>asList(Keys.CONSTRAINT_6);
    }

    @Override
    public List<ForeignKey<CardsupertypesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CardsupertypesRecord, ?>>asList(Keys.CONSTRAINT_67, Keys.CONSTRAINT_67A);
    }

    public Supertypes supertypes() {
        return new Supertypes(this, Keys.CONSTRAINT_67);
    }

    public Cards cards() {
        return new Cards(this, Keys.CONSTRAINT_67A);
    }

    @Override
    public Cardsupertypes as(String alias) {
        return new Cardsupertypes(DSL.name(alias), this);
    }

    @Override
    public Cardsupertypes as(Name alias) {
        return new Cardsupertypes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cardsupertypes rename(String name) {
        return new Cardsupertypes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cardsupertypes rename(Name name) {
        return new Cardsupertypes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
